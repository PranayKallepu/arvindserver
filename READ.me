# **School Dashboard API**

This is a Reactjs, Node.js and Express-based API for managing transactions and user authentication.

---

## **Features**
- User authentication (Sign Up, Login)
- Fetch transactions for all schools or a specific school
- Update transaction statuses manually or via webhook

---

## **Transaction Routes** (`/api`)

### **1. Get All Transactions**
- **URL**: `/api/transactions`
- **Method**: `GET`
- **Description**: Fetch all transaction records.
- **Headers**: 
  - `Authorization`: `Bearer <your_jwt_token>`
- **Response**:
  ```json
[
{
    "_id": {
      "$oid": "6730d9b926c65c39b0ee014b"
      }, 
     "school_id": "67308b27e9bbcdf5f22d24c23",
    "trustee_id": "66505181ca3e97e19f142076",
    "gateway": "CASHFREE",
    "order_amount": 22000,
   "custom_order_id": "test3",
     "status": "Success"
},

]

   {
  "_id": {
    "$oid": "6730d9b926c65c39b0ee014e"
  },
  "school_id": "67308b27e9bbcdf5f22d24c23",
  "trustee_id": "66505181ca3e97e19f142076",
  "gateway": "PHONEPE",
  "order_amount": 10000,
  "custom_order_id": "test6",
  "status ": "Success",
  "status": "failure"
}
   



  ```

---

### **2. Get Transactions by School**
- **URL**: `/api/transactions/school/:school_id`
- **Method**: `GET`
- **Description**: Fetch all transactions for a specific school using `school_id`.
- **Headers**: 
  - `Authorization`: `Bearer <your_jwt_token>`
- **Path Parameter**:
  - `school_id`: The ID of the school (e.g., `123`).
- **Response**:
  ```json
  [
   {
  "_id": {
    "$oid": "6730d9b926c65c39b0ee014b"
  },
  "school_id": "67308b27e9bbcdf5f22d24c23",
  "trustee_id": "66505181ca3e97e19f142076",
  "gateway": "CASHFREE",
  "order_amount": 22000,
  "custom_order_id": "test3",
  "status": "Success"
}
  ]
  ```

---

### **3. Check Transaction Status**
- **URL**: `/api/transactions/status/:custom_order_id`
- **Method**: `GET`
- **Description**: Check the status of a transaction using its `custom_order_id`.
- **Headers**: 
  - `Authorization`: `Bearer <your_jwt_token>`
- **Path Parameter**:
  - `custom_order_id`: The custom order ID of the transaction (e.g., `ORDER123`).
- **Response**:
  ```json
  {
  "_id": {
    "$oid": "6730d9b926c65c39b0ee014b"
  },
  "school_id": "67308b27e9bbcdf5f22d24c23",
  "trustee_id": "66505181ca3e97e19f142076",
  "gateway": "CASHFREE",
  "order_amount": 22000,
  "custom_order_id": "test3",
  "status": "Success"
}
  ```

---

### **4. Webhook Update**
- **URL**: `/api/transactions/webhook`
- **Method**: `POST`
- **Description**: Updates transaction status via a webhook (used by payment providers).
- **Request Body**:
  ```json
  {
    "transaction_id": "127",
    "status": "completed"
  }
  ```
- **Response**:
  ```json
  {
    "message": "Transaction status updated successfully"
  }
  ```

---

### **5. Manual Status Update**
- **URL**: `/api/transactions/update-status`
- **Method**: `POST`
- **Description**: Manually update the status of a transaction.
- **Request Body**:
  ```json
  {
    "transaction_id": "128",
    "status": "failed"
  }
  ```
- **Response**:
  ```json
  {
    "message": "Transaction status updated manually"
  }
  ```

---

## **Setup Instructions**

### 1. Clone the repository
```bash
git clone <repository_url>
```

### 2. Install dependencies
```bash
npm install
```

### 3. Create a `.env` file
Add the following environment variables:
```env
MONGO_URI=your_mongodb_uri
JWT_SECRET=your_secret_key
```

### 4. Start the server
```bash
npm start
```

### 5. Access the APIs
- Base URL: `http://localhost:5000/api`

---



